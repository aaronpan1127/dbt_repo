
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'demo_project'
version: '1.0.0'
config-version: 2


vars:
  # The `start_date` variable will be accessible in all resources
  start_date: '2016-06-01'
  # The `SeasonalityHorizonMonths` variable is only accessible to resources in the demo_project project
  # demo_project:
  #   SeasonalityHorizonMonths: 0

# This setting configures which "profile" dbt uses for this project.
profile: 'demo_project'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  +file_format: delta # or hudi

  # pre- and post- hooks can be defined anywhere within the model hierarchy.
  # when defined at the root level (as they are here), they apply to all models
  # in all packages. These hooks are compiled into the model SQL and run either
  # before or after the model is materializated.
  pre-hook:
      - "set ansi_mode = true"
      # - "SET spark.sql.variable.substitute=false"
      - "insert into dbt_poc.audit (log_identifier,model, state, time) values ('{{invocation_id}}','{{this.name}}', 'start', getdate())"

  post-hook:
      - "insert into dbt_poc.audit (log_identifier,model, state, time) values ('{{invocation_id}}','{{this.name}}', 'end', getdate())"  

  dbt_artifacts:
    +schema: dbt_poc_audit # optional, default is your target schema  
  
  demo_project:
  # Config indicated by + and applies to all files under models/example/
    datamarts:
      example:
        +enabled: true
        +schema: default  
        +materialized: view
      position:
        +schema: position_test
      core_mm_unbilled:
        +schema: dbt_poc    
        # +location_root: /mnt/datamart/dbt_poc/

seeds:
  +file_format: delta # or hudi
  
snapshots:
  +file_format: delta # or hudi

# Like the pre- and post- hooks above, the on-run-start and on-run-end configs
# make it possible to run SQL at the very beginning, and very end of a dbt run.
on-run-start:
    - "create table if not exists dbt_poc.audit (log_identifier string, model string, state string, time timestamp)"
# on-run-end:
#   - "{{ dbt_artifacts.upload_results(results) }}"